module de.fzi.sensidl.language.GenerateSensidl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import tools.mdsd.ecoreworkflow.mwe2lib.bean.EclipseRCPSupportingStandaloneSetup
import tools.mdsd.ecoreworkflow.mwe2lib.component.URISupportingDirectoryCleaner

var workspaceRoot = "../.."
var rootPath = "${workspaceRoot}/bundles"

Workflow {
	
	bean = EclipseRCPSupportingStandaloneSetup {
		scanClassPath = true
		platformUri = workspaceRoot
		
		uriMap = {
			from = "platform:/plugin/de.fzi.sensidl.design/model/sensIDL.genmodel"
			to = "platform:/resource/de.fzi.sensidl.design/model/sensIDL.genmodel"
		}

		registerGenModelFile = "platform:/resource/de.fzi.sensidl.design/model/sensIDL.genmodel"
	}
	
	component = URISupportingDirectoryCleaner {
		exclude = ".gitkeep"
		directory = "platform:/resource/de.fzi.sensidl.language/src-gen"
		directory = "platform:/resource/de.fzi.sensidl.language.tests/src-gen"
		directory = "platform:/resource/de.fzi.sensidl.language.ui/src-gen"
		directory = "platform:/resource/de.fzi.sensidl.language.ui.tests/src-gen"
		directory = "platform:/resource/de.fzi.sensidl.language.ide/src-gen"
	}
	
	component = XtextGenerator {
		
		configuration = {
			project = StandardProjectConfig {
				baseName = "de.fzi.sensidl.language"
				rootPath = rootPath
				runtimeTest = {
					root = "${workspaceRoot}/tests/de.fzi.sensidl.language.tests"
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					root = "${workspaceRoot}/tests/de.fzi.sensidl.language.ui.tests"
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false
			}
		}
		language = StandardLanguage {
			name = "de.fzi.sensidl.language.Sensidl"
			fileExtensions = "sidl"
			referencedResource = "platform:/resource/de.fzi.sensidl.design/model/sensIDL.genmodel"
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			formatter = {
				generateXtendStub = false
			}

			serializer = {
				generateStub = false
			}
			validator = {
				generateXtendStub = true
				 composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
			}
			generator = {
				generateXtendStub = true
			}
			junitSupport = {
				junitVersion = "4"
			}
			scopeProvider = {
				generateXtendStub = true
			}
			
		}
	}
}
